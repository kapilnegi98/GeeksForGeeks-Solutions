class BinaryTree
{
    
    static ArrayList <Integer> verticalOrder(Node root)
    {
        ArrayList<Integer> result = new ArrayList<>();
        // add your code here
         if (root == null)
            return result;
 
        // Create a map and store vertical oder in
        // map using function getVerticalOrder()
        TreeMap<Integer, ArrayList<Integer> > m = new TreeMap<>();
        int hd = 0;
 
        // Create queue to do level order traversal.
        // Every item of queue contains node and
        // horizontal distance.
        Queue<Qobj> que = new LinkedList<>();
        que.add(new Qobj(0, root));
 
        while (!que.isEmpty()) {
            // pop from queue front
            Qobj temp = que.poll();
            hd = temp.hd;
            Node node = temp.node;
 
            // insert this node's data in array of hash
            if (m.containsKey(hd)) {
                m.get(hd).add(node.data);
            }
            else {
                ArrayList<Integer> al = new ArrayList<>();
                al.add(node.data);
                m.put(hd, al);
            }
            if (node.left != null)
                que.add(new Qobj(hd - 1, node.left));
            if (node.right != null)
                que.add(new Qobj(hd + 1, node.right));
        }
 
        // Traverse the map and print nodes at
        // every horizontal distance (hd)
        for (Map.Entry<Integer, ArrayList<Integer> > entry : m.entrySet()) {
            ArrayList<Integer> al = entry.getValue();
            for (Integer i : al)
                result.add(i);
        }
        return result;
        
    }
}
